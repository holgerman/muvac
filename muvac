#! /usr/bin/env bash
shopt -s expand_aliases
shopt -s extglob
# kill 0 only would a) kill also parent processes and b) infinit recursion leads to segmentation fault
trap "trap - SIGTERM && kill -PIPE -- -$$ &> /dev/null" INT TERM SIGINT SIGTERM EXIT
# set -e

usage() {
	echo "SYNOPSIS"
	echo $(basename $0)" -1 [PATH] -g [PATH] -o [PATH]"
	echo ""
	echo "DESCRIPTION"
	echo $(basename $0)" is a multiple variance caller pipeline for germline variances"
	echo "v0.1.0"
	echo ""
	echo "INSTALLATION"
	echo "-i | --install all               : installation to exported directory: export MUVAC=<PATH> - default: $PWD/tools"
	echo ""
	echo "OPTIONS"
	echo "-1 | --fastq1 [path,path,..]     : fastq input - single or first pair, comma seperated"
	echo "-2 | --fastq2 [path,path,..]     : fastq input - optional. second pair, comma seperated"
	echo "-g | --genome [path]             : genome fasta with suffig '.fa'"
	echo "-a | --adapter [string]          : adapter sequence"
	echo "-o | --out [path]                : output directory - default: $PWD/results"
	echo "-t | --threads [value]           : threads - default: $threads"
	echo "-l | --log [path]                : log file - default: $PWD/results/run.log "
	echo "-h | --help                      : prints this message"
	echo "-v | --verbose                   : enable verbose mode"
	echo "-r | --remove                    : finally remove intermediate results and temporary files"
	echo "-s | --split                     : run Segemehl mapper in split mode with max-insert size 30k"
	echo ""
	echo "-no-pre   | --no-preprocessing   : disables quality analysis, adapter clipping, error correction"
	echo "-no-trim  | --no-trimming        : disables quality trimming"
	echo "-no-bmap  | --no-bwa             : disables mapping by BWA"
	echo "-no-tmap  | --no-tophat          : disables mapping by TopHat2"
	echo "-no-smap  | --no-segemehl        : disables mapping by Segemehl"
	echo "-no-recal | --no-recalibration   : disables GATK best practice realignment and base recalibration"
	echo "-no-hc    | --no-haplotypecaller : disables variance caller GATK HaplotypeCaller"
	echo "-no-mu    | --no-mutect          : disables variance caller GATK MuTect2"
	echo "-no-fb    | --no-freebayes       : disables variance caller Freebayes"
	echo "-no-st    | --no-samtools        : disables variance caller Samtools/Bcftools"
	echo "-no-pp    | --no-platypus        : disables variance caller Platypus"
	#echo "-Sq -Sa -Sconv -Str -Scor -Sms -Smt -Smb -Sort -Srg -Srmd -Sreo -Sret -Srea -Srec -Sprint -Shc -Smu -Sfb -Sst -Spp -Smerge"
	exit 0
}

install () {
	if [[ $make == "all" ]]; then
		cp $muvacdir/muvac $tooldir
		cp $muvacdir/dlh19 $tooldir
		cp $muvacdir/vcfmerge.pl $tooldir
		cp $muvacdir/vcfix.pl $tooldir
	fi

	if [[ $make == "all" ]]; then
		echo ":INFO: installing ncurses"
		url='https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.0.tar.gz'
		wget -q $url -O $tooldir/ncurses.tar.gz && tar -xzf $tooldir/ncurses.tar.gz -C $tooldir && rm $tooldir/ncurses.tar.gz
		ncurses=$(ls -d $tooldir/ncurses-* | sort -r | head -1)
		cd $ncurses
		rm -rf built; mkdir built 
		make clean; ./configure --prefix=$PWD/built && make && make install
		if [[ $? -gt 0 ]]; then
		 	echo ":ERROR: ncurses installation failed"
		 	return 1
		fi

		echo  ":INFO: installing gtextutils"
		url='https://github.com/agordon/libgtextutils/releases/download/0.7/libgtextutils-0.7.tar.gz'
		wget -q $url -O $tooldir/libgtextutils.tar.gz && tar -xzf $tooldir/libgtextutils.tar.gz -C $tooldir && rm $tooldir/libgtextutils.tar.gz
		gtextutils=$(ls -d $tooldir/libgtextutils-* | sort -r | head -1)
		cd $gtextutils
		rm -rf built; mkdir built 
		make clean; ./configure --prefix=$PWD/built && sed -i -r 's/^\s*CXXFLAGS\s*=\s*/override CXXFLAGS += /' Makefile && make CXXFLAGS="-std=c++03" && make install
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: gtextutils installation failed"
			return 1
		fi

		echo ":INFO: installing zlib"
		url='https://github.com/madler/zlib/archive/v1.2.8.tar.gz' #current version 1.2.11 is not recognized as bigger than 1.2.5 by R
		wget -q $url -O $tooldir/zlib.tar.gz && tar -xzf $tooldir/zlib.tar.gz -C $tooldir && rm $tooldir/zlib.tar.gz
		zlib=$(ls -d $tooldir/zlib-* | sort -r | head -1)
		cd $zlib 
		rm -rf built; mkdir built 
		make clean; ./configure --prefix=$PWD/built && make && make install
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: zlib installation failed"
			return 1
		fi
	fi
	ncurses=$(ls -d $tooldir/ncurses-* | sort -r | head -1)
	gtextutils=$(ls -d $tooldir/libgtextutils-* | sort -r | head -1)
	zlib=$(ls -d $tooldir/zlib-* | sort -r | head -1)

	if [[ $make == "all" ]] || [[ $make == "bcftools" ]]; then
		echo ":INFO: installing bcftools"
		url='https://github.com/samtools/bcftools/releases/download/1.3.1/bcftools-1.3.1.tar.bz2'
		wget -q $url -O $tooldir/bcftools.tar.bz2 && tar -xjf $tooldir/bcftools.tar.bz2 -C $tooldir && rm $tooldir/bcftools.tar.bz2
		cd $(ls -d $tooldir/bcftools-* | sort -r | head -1)
		make clean;
		make
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: bcftools installation failed"
			return 1
	    fi
	fi

	if [[ $make == "all" ]] || [[ $make == "freebayes" ]]; then
	    echo ":INFO: installing freebayes"
	    cd $tooldir
	    git clone --recursive git://github.com/ekg/freebayes.git
	    cd freebayes
	    make clean
	    rm -rf bamtools
	    git clone https://github.com/pezmaster31/bamtools.git
	    cd bamtools
	    rm -rf build; mkdir -p build
	    cd build
	    cmake .. && make
	    cd $tooldir/freebayes/vcflibs
	    make clean; make
	    cd $tooldir/freebayes/SeqLib
	    make clean; ./configure --prefix=$PWD && make && make install
	    cd $tooldir/freebayes
	    make
	    if [[ $? -gt 0 ]]; then
            echo ":ERROR: freebayes installation failed"
        	return 1
        fi
	fi

	if [[ $make == "all" ]] || [[ $make == "fastqc" ]]; then
		echo ":INFO: installing fastqc"
		url='http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.5.zip'
		wget -q $url -O $tooldir/fastqc.zip && unzip -q -o -d $tooldir $tooldir/fastqc.zip && rm $tooldir/fastqc.zip
		chmod 755 $tooldir/FastQC/fastqc
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: fastqc installation failed"
			return 1
		fi
		mv $tooldir/FastQC $tooldir/$($tooldir/FastQC/fastqc -v | sed 's/ /-/g')
	fi

	if [[ $make == "all" ]] || [[ $make == "trimmomatic" ]]; then
		echo ":INFO: installing trimmomatic"
		url='http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/Trimmomatic-0.36.zip'
		wget -q $url -O $tooldir/trimmomatic.zip && unzip -q -o -d $tooldir $tooldir/trimmomatic.zip && rm $tooldir/trimmomatic.zip
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: trimmomatic installation failed"
			return 1
		fi
	fi

	if [[ $make == "all" ]] || [[ $make == "dnapi" ]]; then
		echo ":INFO: installing dnapi"
		url='https://github.com/jnktsj/DNApi/archive/v1.1.tar.gz'
		wget -q $url -O $tooldir/dnapi.tar.gz && tar -xzf $tooldir/dnapi.tar.gz -C $tooldir && rm $tooldir/dnapi.tar.gz
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: dnapi installation failed"
			return 1
		fi
	fi

	if [[ $make == "all" ]] || [[ $make == "fastx_toolkit" ]]; then
		echo ":INFO: installing fastx_toolkit"
		url='https://github.com/agordon/fastx_toolkit/releases/download/0.0.14/fastx_toolkit-0.0.14.tar.bz2'
		wget -q $url -O $tooldir/fastx_toolkit.tar.bz2 && tar -xjf $tooldir/fastx_toolkit.tar.bz2 -C $tooldir && rm $tooldir/fastx_toolkit.tar.bz2
		cd $(ls -d $tooldir/fastx_toolkit-* | sort -r | head -1) 
		rm -rf built; mkdir built 
		export GTEXTUTILS_CFLAGS="-I$gtextutils/built/include/gtextutils/gtextutils -I$gtextutils/libgtextutils-0.7/built/include/gtextutils -I$gtextutils/built/include"
		export GTEXTUTILS_LIBS="-L$gtextutils/built/lib"
		make clean; ./configure --prefix=$PWD/built 		
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: fastx_toolkit installation failed"
			return 1
		fi
		make -i && make install -i
		if [[ ! -e built/bin/fastx_clipper ]]; then
			echo ":ERROR: fastx_toolkit installation failed"
			return 1
		fi
	fi

	if [[ $make == "all" ]] || [[ $make == "cutadapt" ]]; then
		echo ":INFO: installing cutadapt"
		mkdir -p $tooldir/cutadapt
		cd $tooldir/cutadapt
		export PYTHONUSERBASE=$tooldir/cutadapt
		unset PYTHONPATH
		wget -q https://bootstrap.pypa.io/get-pip.py -O get-pip.py && python get-pip.py --user
		bin/pip install --user cutadapt
	fi

	if [[ $make == "all" ]] || [[ $make == "gatk" ]]; then
		echo ":INFO: installing gatk"
		url='http://mirrors.ae-online.de/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz'
		wget -q $url -O $tooldir/maven.tar.gz && tar -xzf $tooldir/maven.tar.gz -C $tooldir && rm $tooldir/maven.tar.gz
		maven=$(ls $tooldir/apache-maven-*/bin/mvn | sort -r | head -1)
		url='https://github.com/broadgsa/gatk-protected/archive/3.7.tar.gz'
		wget -q $url -O $tooldir/gatk.tar.gz && tar -xzf $tooldir/gatk.tar.gz -C $tooldir && rm $tooldir/gatk.tar.gz
		cd $(ls -d $tooldir/gatk-* | sort -r | head -1) 
		$maven clean; $maven -T $threads verify
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: gatk installation failed"
			return 1
		fi
	fi

	if [[ $make == "all" ]] || [[ $make == "tophat" ]]; then
		echo ":INFO: installing bowte2"
		url='https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.3.0/bowtie2-2.3.0-source.zip'
		wget -q $url -O $tooldir/bowtie2.zip && unzip -q -o -d $tooldir $tooldir/bowtie2.zip && rm $tooldir/bowtie2.zip
		cd $(ls -d $tooldir/bowtie2-* | sort -r | head -1)
		make NO_TBB=1
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: bowtie2 installation for tophat2 failed"
			return 1
		fi
		echo ":INFO: installing tophat2"
		url='https://ccb.jhu.edu/software/tophat/downloads/tophat-2.1.1.Linux_x86_64.tar.gz'
		wget -q $url -O $tooldir/tophat2.tar.gz && tar -xzf $tooldir/tophat2.tar.gz -C $tooldir && rm $tooldir/tophat2.tar.gz
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: tophat2 installation failed"
			return 1
		fi
	fi

	if [[ $make == "all" ]] || [[ $make == "bwa" ]]; then
		echo ":INFO: installing bwa"
		url='https://github.com/lh3/bwa/releases/download/v0.7.15/bwa-0.7.15.tar.bz2'
		wget -q $url -O $tooldir/bwa.tar.bz2 && tar -xjf $tooldir/bwa.tar.bz2 -C $tooldir && rm $tooldir/bwa.tar.bz2
		cd $(ls -d $tooldir/bwa-* | sort -r | head -1)
		make clean; sed -i -r 's/^\s*CFLAGS\s*=\s*/override CFLAGS += /' Makefile && make CFLAGS="-I$zlib/built/include/ -L$zlib/built/lib"
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: bwa installation failed"
			return 1
		fi
	fi

	if [[ $make == "all" ]] || [[ $make == "segemehl" ]]; then
		# echo ":INFO: installing segemehl"
		# url='http://www.bioinf.uni-leipzig.de/Software/segemehl/segemehl_0_2_0.tar.gz'
		# wget -q $url -O $tooldir/segemehl.tar.gz && tar -xzf $tooldir/segemehl.tar.gz -C $tooldir && rm $tooldir/segemehl.tar.gz
		# cd $(ls -d $tooldir/segemehl*/segemehl | sort -r | head -1) && sed -i -r 's/^\s*(C|LD)FLAGS\s*=\s*/override \1FLAGS += /' Makefile
		# make clean; make all PREFIX=$PWD CFLAGS="-I$ncurses/built/include -I$ncurses/built/include/ncurses -I$zlib/built/include" LDFLAGS="-L$ncurses/built/lib -L$zlib/built/lib"
		# if [[ $? -gt 0 ]]; then
		# 	echo "segemehl installation failed"
		# 	return 1
		# fi
		cp -r $muvacdir/segemehl_0_3_0 $tooldir
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: segemehl installation failed"
			return 1
		fi
	fi

	if [[ $make == "all" ]] || [[ $make == "samtools" ]]; then
		echo ":INFO: installing samtools"
		url='https://github.com/samtools/samtools/releases/download/1.3.1/samtools-1.3.1.tar.bz2'
		wget -q $url -O $tooldir/samtools.tar.bz2 && tar -xjf $tooldir/samtools.tar.bz2 -C $tooldir && rm $tooldir/samtools.tar.bz2
		cd $(ls -d $tooldir/samtools-*/ | sort -r | head -1)
		rm -rf built; mkdir built
		make clean; ./configure --prefix=$PWD/built CFLAGS="-I$ncurses/built/include -I$ncurses/built/include/ncurses -I$zlib/built/include" LDFLAGS="-L$ncurses/built/lib -L$zlib/built/lib" && sed -i -r 's/^\s*(C|LD)FLAGS\s*=\s*/override \1FLAGS += /' Makefile &&  make CFLAGS="-fPIC -I$ncurses/built/include -I$ncurses/built/include/ncurses -I$zlib/built/include" LDFLAGS="-L$ncurses/built/lib -L$zlib/built/lib" && make install
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: samtools installation failed"
			return 1
		fi
		cd $(ls -d htslib-*/ | sort -r | head -1)
		make && make install
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: htslib installation failed"
			return 1
		fi
	fi
	samtools=$(ls -d $tooldir/samtools-* | sort -r | head -1)

	if [[ $make == "all" ]] || [[ $make == "platypus" ]]; then
		echo ":INFO: installing platypus"
		git clone https://github.com/andyrimmer/Platypus.git
		cd Platypus
		make clean;
		export C_INCLUDE_PATH=$samtools/built/include
		export LIBRARY_PATH=$samtools/built/lib
		export LD_LIBRARY_PATH=$samtools/built/lib
		make PREFIX=$PWD && chmod 755 $bin/Platypus.py
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: platypus installation failed"
			return 1
		fi
	fi

	if [[ $make == "all" ]] || [[ $make == "rcorrector" ]]; then 
		echo ":INFO: installing rcorrector"
		url=https://github.com/mourisl/Rcorrector/archive/v1.0.2.tar.gz
		wget -q $url -O $tooldir/rcorrector.tar.gz && tar -xzf $tooldir/rcorrector.tar.gz -C $tooldir && rm $tooldir/rcorrector.tar.gz
		cd $(ls -d $tooldir/Rcorrector-*/ | sort -r | head -1)
		url=https://github.com/gmarcais/Jellyfish/releases/download/v2.2.4/jellyfish-2.2.4.tar.gz
		wget -q $url -O jellyfish.tar.gz
		sed -i '/wget/d' Makefile		
		make clean; make
		if [[ $? -gt 0 ]]; then
			echo ":ERROR: rcorrector installation failed"
			return 1
		fi
		chmod 755 run_rcorrector.pl
	fi

	if [[ $make == "all" ]] || [[ $make == "picard" ]]; then
	    mkdir -p $tooldir/picard-2.8.2
	    url='https://github.com/broadinstitute/picard/releases/download/2.8.2/picard-2.8.2.jar'
	    wget -q $url -O $tooldir/picard-2.8.2/picard.jar
	    if [[ $? -gt 0 ]]; then
			echo ":ERROR: picard installation failed"
			return 1
	    fi
	fi

	echo ":INFO: installation successful"
	return 0
}

progress () {
	mod=0
	while true; do
		mod=$((mod+1))
		if [[ $mod -eq 2 ]]; then
			mod=0
			echo -en "\r/"
		else
			echo -en "\r\\"
		fi
		sleep 1
	done
}

userlog () {
	tail -f $1 2>&1 | grep -E --line-buffered '^\s*(:INFO|:ERROR|Elapsed \(wall|Maximum resident)'
}

pipeline () {
if [[ $noprep -eq 0 ]]; then
	echo ":INFO: calcultating qualities"
	mkdir -p $outdir/qualities
	cmd=()
	for f in {${fastq1[@]},${fastq2[@]}}; do
		cmd+=("${BASH_ALIASES[fastqc]} -outdir $outdir/qualities $f\n")
	done 
	#enable dev skip option if already done
	[[ $Sq -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	if [[ $adapter ]]; then
		echo ":INFO: clipping"
		mkdir -p $outdir/clipped
		cmd=()
		if [[ ${fastq2[0]} ]]; then
			for i in $(seq 0 $((${#fastq1[@]}-1))); do
				o1=$outdir/clipped/$(basename ${fastq1[$i]})
				o2=$outdir/clipped/$(basename ${fastq2[$i]})
				cmd+=("${BASH_ALIASES[cutadapt]} -b $adapter -B $adapter -m 12 -o $o1 -p $o2 ${fastq1[$i]} ${fastq2[$i]}\n")
				fastq1[$i]=$o1
				fastq2[$i]=$o2
			done 
		else 
			for i in $(seq 0 $((${#fastq1[@]}-1))); do
				o=$outdir/trimmed/$(basename ${fastq1[$i]})
				cmd+=("${BASH_ALIASES[cutadapt]} -b $adapter -m 12 -o ${fastq1[$i]}\n")
				fastq1[$i]=$o
			done 
		fi
		#enable dev skip option if already done
		[[ $Sa -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}
	fi
fi

	phred=$(head -400 ${fastq1[0]} | awk '{if(NR%4==0) printf("%s",$0);}' | od -A n -t u1 | awk 'BEGIN{min=100;max=0;}{for(i=1;i<=NF;i++) {if($i>max) max=$i; if($i<min) min=$i;}}END{if(max<=74 && min<59) print "phred33"; else if(max>73 && min>=64) print "phred64"; else if(min>=59 && min<64 && max>73) print "solexa64"; else print "unknown";}')
	if [[ ! $phred =~ ^phred ]]; then
		echo ":ERROR: $phred fastq encoding - need sanger (phred33) or illumina (phred64)"
		return 1
	fi
	if [[ $phred == "phred64" ]]; then
		echo ":INFO: converting quality scores"
		mkdir -p $outdir/converted
		cmd=()
		for i in $(seq 0 $((${#fastq1[@]}-1))); do
			o=$outdir/converted/$(basename ${fastq1[$i]})
			cmd+=("${BASH_ALIASES[fastq_quality_converter]} -i $f -o $o\n")
			fastq1[$i]=$o
		done 
		for i in $(seq 0 $((${#fastq2[@]}-1))); do
			o=$outdir/converted/$(basename ${fastq2[$i]})
			cmd+=("${BASH_ALIASES[fastq_quality_converter]} -i $f -o $o\n")
			fastq2[$i]=$o
		done 
		#enable dev skip option if already done
		[[ $Sconv -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}
	fi

if [[ $notrim -eq 0 ]]; then
	echo ":INFO: trimming"
	mkdir -p $outdir/trimmed
	cmd=()
	if [[ ${fastq2[0]} ]]; then
		for i in $(seq 0 $((${#fastq1[@]}-1))); do
			o1=$outdir/trimmed/$(basename ${fastq1[$i]})
			o2=$outdir/trimmed/$(basename ${fastq2[$i]})
			cmd+=("${BASH_ALIASES[trimmomatic]} PE -threads $threads -phred33 -trimlog $o.log ${fastq1[$i]} ${fastq2[$i]} $o1 $o1.singletons $o2 $o2.singletons SLIDINGWINDOW:7:20 MINLEN:20\n")
			fastq1[$i]=$o1
			fastq2[$i]=$o2
		done
	else 
		for i in $(seq 0 $((${#fastq1[@]}-1))); do
			o=$outdir/trimmed/$(basename ${fastq1[$i]})
			cmd+=("${BASH_ALIASES[trimmomatic]} SE -threads $threads -phred33 -trimlog $o.log ${fastq1[$i]} $o SLIDINGWINDOW:7:20 MINLEN:20\n")
			fastq1[$i]=$o
		done
	fi
	#enable dev skip option if already done
	[[ $Str -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}
fi

if [[ $noprep -eq 0 ]]; then
    echo ":INFO: read error correction"
    mkdir -p $outdir/rawcorrected
    if [[ ${fastq2[0]} ]]; then
    	for i in $(seq 0 $((${#fastq1[@]}-1))); do
    	    o1=$outdir/rawcorrected/$(basename ${fastq1[$i]})
    	    o2=$outdir/rawcorrected/$(basename ${fastq2[$i]})
			if [[ $Scor -eq 0 ]]; then #enable dev skip option if already done
				/usr/bin/time -v ${BASH_ALIASES[rcorrector]} -1 ${fastq1[$i]} -2 ${fastq2[$i]} -od $outdir/rawcorrected -t $threads
				mv ${o1%.*}.cor.fq $o1
				mv ${o2%.*}.cor.fq $o2
			fi
    	    fastq1[$i]=$o1
    	    fastq2[$i]=$o2
    	done
    else
    	for i in $(seq 0 $((${#fastq1[@]}-1))); do
            o=$outdir/rawcorrected/$(basename ${fastq1[$i]})
			if [[ $Scor -eq 0 ]]; then #enable dev skip option if already done
				/usr/bin/time -v ${BASH_ALIASES[rcorrector]} -s ${fastq1[$i]} -od $outdir/rawcorrected -t $threads
				mv ${o%.*}.cor.fq $o
			fi
            fastq1[$i]=$o
        done
    fi
fi

if [[ $nosmap -eq 0 ]]; then
	echo ":INFO: mapping - segemehl"
	mkdir -p $outdir/mapped/segemehl
	declare -A mappingsegemehl
	cmd=()
	if [[ ! -e $genome.segemehl.idx ]]; then
	 	${BASH_ALIASES[segemehl]} -x $genome.segemehl.idx -d $genome
	fi
	for i in $(seq 0 $((${#fastq1[@]}-1))); do
	 	o=$outdir/mapped/segemehl/$(basename ${fastq1[$i]})
	 	o=${o%.*}
		if [[ $split -eq 0 ]]; then
			sege="${BASH_ALIASES[segemehl]}"
		else 
			sege="${BASH_ALIASES[segemehl]} -S --maxsplitevalue 30000"
		fi
		if [[ ${fastq2[0]} ]]; then
		 	cmd+=("$sege -i $genome.segemehl.idx -d $genome -q ${fastq1[$i]} -p ${fastq2[$i]} -A 95 -t $threads -u $o.unmapped.sam > $o.sam\n")
		else
	 		cmd+=("$sege -i $genome.segemehlidx -d $genome -q ${fastq1[$i]} -A 95 -t $threads -u $o.unmappes.sam > $o.sam\n")
		fi
	 	mappingsegemehl[$i]=$o
	done
	#enable dev skip option if already done
	[[ $Sms -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}
fi

if [[ $notmap -eq 0 ]]; then
	echo ":INFO: mapping - tophat"
	mkdir -p $outdir/mapped/tophat
	declare -A mappingtophat
	cmd=()
	if [[ ! -e ${genome%.*}.1.bt2 ]]; then
		${BASH_ALIASES[bowtie2-build]} --threads $threads --seed 12345 $genome ${genome%.*}
	fi
	for i in $(seq 0 $((${#fastq1[@]}-1))); do
		o=$outdir/mapped/tophat/$(basename ${fastq1[$i]})
		o=${o%.*}
		if [[ ${fastq2[0]} ]]; then #platypus dont like mapping ranges over c limits of short int (32767)
			cmd+=("${BASH_ALIASES[tophat2]} --max-intron-length 30000 --max-segment-intron 30000 --tmp-dir $outdir/tmp/tophat -p $threads -o $outdir/mapped/tophat ${genome%.*} ${fastq1[$i]} ${fastq2[$i]} && mv $outdir/mapped/tophat/accepted_hits.bam $o.unsorted && mv $outdir/mapped/tophat/unmapped.bam $o.unmapped.bam\n")
		else 
			cmd+=("${BASH_ALIASES[tophat2]} --max-intron-length 30000 --max-segment-intron 30000 --tmp-dir $outdir/tmp/tophat -p $threads -o $outdir/mapped/tophat ${genome%.*} ${fastq1[$i]} && mv $outdir/mapped/tophat/accepted_hits.bam $o.unsorted && mv $outdir/mapped/tophat/unmapped.bam $o.unmapped.bam\n")
		fi			
		mappingtophat[$i]=$o.unsorted
	done
	#enable dev skip option if already done
	[[ $Smt -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}
fi

if [[ $nobmap -eq 0 ]]; then
	echo ":INFO: mapping - bwa"
	mkdir -p $outdir/mapped/bwa
	declare -A mappingbwa
	cmd=()
	if [[ ! -e $genome.pac ]]; then 
		${BASH_ALIASES[bwa]} index -a bwtsw $genome
	fi
	readlength=$(head -400 ${fastq1[0]} | awk 'NR%4==2{l+=length($0)}END{printf("%d",l/(NR/4))}')
	if [[ $readlength -lt 70 ]]; then 
		for f in {${fastq1[@]},${fastq2[@]}}; do
			o=$outdir/mapped/bwa/$(basename $f)
			o=${o%.*}
			cmd+=("${BASH_ALIASES[bwa]} aln -t $threads $genome $f > $o.sai\n")
		done
		for i in $(seq 0 $((${#fastq1[@]}-1))); do
			o1=$outdir/mapped/bwa/$(basename ${fastq1[$i]})
			o1=${o1%.*}	
			o2=$outdir/mapped/bwa/$(basename ${fastq2[$i]})
			o2=${o2%.*}
			if [[ ${fastq2[0]} ]]; then
				cmd+=("${BASH_ALIASES[bwa]} sampe $genome $o1.sai $o2.sai ${fastq1[$i]} ${fastq2[$i]} > $o1.all\n")
			else 
				cmd+=("${BASH_ALIASES[bwa]} samse $genome $o1.sai ${fastq1[$i]} > $o1.all\n")
			fi
			mappingbwa[$i]=$o1.all
		done
	else 
		for i in $(seq 0 $((${#fastq1[@]}-1))); do
			o=$outdir/mapped/bwa/$(basename ${fastq1[$i]})
			o=${o%.*}	
			if [[ ${fastq2[0]} ]]; then
				cmd+=("${BASH_ALIASES[bwa]} mem -M -t $threads $genome ${fastq1[$i]} ${fastq2[$i]} > $o.all\n")
			else 
				cmd+=("${BASH_ALIASES[bwa]} mem -M -t $threads $genome ${fastq1[$i]} > $o.all\n")
			fi
			mappingbwa[$i]=$o.all
		done
	fi
	#enable dev skip option if already done
	[[ $Smb -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}
	cmd=()
	for i in $(seq 0 $((${#mappingbwa[@]}-1))); do
		o=${mappingbwa[$i]}
		o=${o%.*}
		cmd+=("${BASH_ALIASES[samtools]} view -H $o.all > $o.sam && ${BASH_ALIASES[samtools]} view -F 4 $o.all >> $o.sam\n")
		cmd+=("${BASH_ALIASES[samtools]} view -H $o.all > $o.unmapped.sam && ${BASH_ALIASES[samtools]} view -f 4 $o.all >> $o.unmapped.sam\n")
		mappingbwa[$i]=$o.sam
	done
	#enable dev skip option if already done
	[[ $Smb -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}
fi

	echo ":INFO: create sorted bams"
	cmd=()
	for i in $(seq 0 $((${#mappingsegemehl[@]}-1))); do
		o=${mappingsegemehl[$i]}
		o=${o%.*}
		cmd+=("${BASH_ALIASES[samtools]} view -bS $o.sam | ${BASH_ALIASES[samtools]} sort - -T $o.tmp -o $o.bam\n")
	    mappingsegemehl[$i]=$o.bam
	done  
	for i in $(seq 0 $((${#mappingtophat[@]}-1))); do
		o=${mappingtophat[$i]}
		o=${o%.*}
		cmd+=("${BASH_ALIASES[samtools]} sort $o.unsorted -T $o.tmp -o $o.bam\n")
	    mappingtophat[$i]=$o.bam
	done 
	for i in $(seq 0 $((${#mappingbwa[@]}-1))); do
		o=${mappingbwa[$i]}
		o=${o%.*}
		cmd+=("${BASH_ALIASES[samtools]} view -bS $o.sam | ${BASH_ALIASES[samtools]} sort - -T $o.tmp -o $o.bam\n")
		mappingbwa[$i]=$o.bam
	done 
	#enable dev skip option if already done
	[[ $Sort -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	echo ":INFO: add read group information"
	cmd=()
	for f in {${mappingsegemehl[@]},${mappingtophat[@]},${mappingbwa[@]}}; do
		cmd+=("${BASH_ALIASES[picard]} AddOrReplaceReadGroups I=$f O=$f.tmp RGID=1 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=sample VALIDATION_STRINGENCY=SILENT && mv $f.tmp $f\n")
	done
	#enable dev skip option if already done
	[[ $Srg -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	echo ":INFO: index bam"
	cmd=()
	for f in {${mappingsegemehl[@]},${mappingtophat[@]},${mappingbwa[@]}}; do
	    cmd+=("${BASH_ALIASES[samtools]} index $f\n")
	done
	#enable dev skip option if already done
	[[ $Srg -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	echo ":INFO: remove duplicates"
	cmd=()
	for i in $(seq 0 $((${#mappingsegemehl[@]}-1))); do 
		mkdir -p $outdir/noduplicates/segemehl
		o=$outdir/noduplicates/segemehl/$(basename ${mappingsegemehl[$i]})
		cmd+=("${BASH_ALIASES[picard]} MarkDuplicates I=${mappingsegemehl[$i]} O=$o M=$o.metrics ASSUME_SORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT\n")
		mappingsegemehl[$i]=$o
	done
	for i in $(seq 0 $((${#mappingbwa[@]}-1))); do 
		mkdir -p $outdir/noduplicates/bwa
		o=$outdir/noduplicates/bwa/$(basename ${mappingbwa[$i]})
		cmd+=("${BASH_ALIASES[picard]} MarkDuplicates I=${mappingbwa[$i]} O=$o M=$o.metrics ASSUME_SORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT\n")
		mappingbwa[$i]=$o
	done
	for i in $(seq 0 $((${#mappingtophat[@]}-1))); do 
		mkdir -p $outdir/noduplicates/tophat
		o=$outdir/noduplicates/tophat/$(basename ${mappingtophat[$i]})
		cmd+=("${BASH_ALIASES[picard]} MarkDuplicates I=${mappingtophat[$i]} O=$o M=$o.metrics ASSUME_SORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT\n")
		mappingtophat[$i]=$o
	done
	#enable dev skip option if already done
	[[ $Srmd -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	echo ":INFO: index bam"
	cmd=()
	for f in {${mappingsegemehl[@]},${mappingtophat[@]},${mappingbwa[@]}}; do
	    cmd+=("${BASH_ALIASES[samtools]} index $f\n")
	done 
	#enable dev skip option if already done
	[[ $Srmd -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	echo ":INFO: reorder bam"
	if [[ ! -e ${genome%.*}.dict ]]; then
	    /usr/bin/time -v ${BASH_ALIASES[picard]} CreateSequenceDictionary R=$genome
	fi
	if [[ ! -e $genome.fai ]]; then
	    /usr/bin/time -v ${BASH_ALIASES[samtools]} faidx $genome
	fi
	cmd=()
	for i in $(seq 0 $((${#mappingsegemehl[@]}-1))); do
		o=${mappingsegemehl[$i]}
		o=${o%.*}
		cmd+=("${BASH_ALIASES[picard]} ReorderSam I=$o.bam O=$o.reordered.bam R=$genome CREATE_INDEX=TRUE VALIDATION_STRINGENCY=SILENT\n")
		mappingsegemehl[$i]=$o.reordered.bam
	done  
	for i in $(seq 0 $((${#mappingbwa[@]}-1))); do
		o=${mappingbwa[$i]}
		o=${o%.*}
		cmd+=("${BASH_ALIASES[picard]} ReorderSam I=$o.bam O=$o.reordered.bam R=$genome CREATE_INDEX=TRUE VALIDATION_STRINGENCY=SILENT\n")
		mappingbwa[$i]=$o.reordered.bam
	done 
	for i in $(seq 0 $((${#mappingtophat[@]}-1))); do
		o=${mappingtophat[$i]}
		o=${o%.*}
		cmd+=("${BASH_ALIASES[picard]} ReorderSam I=$o.bam O=$o.reordered.bam R=$genome CREATE_INDEX=TRUE VALIDATION_STRINGENCY=SILENT\n")
	    mappingtophat[$i]=$o.reordered.bam
	done 
	#enable dev skip option if already done
	[[ $Sreo -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

if [[ $norecal -eq 0 ]]; then
	echo ":INFO: indel error prediction"
	cmd=()
	for f in ${mappingsegemehl[@]}; do
	    mkdir -p $outdir/errorcorrected/segemehl
		o=$(basename $f)
	    o=$outdir/errorcorrected/segemehl/${o%.*}.intervals
        cmd+=("${BASH_ALIASES[gatk]} -T RealignerTargetCreator -nt $threads -R $genome -I $f -o $o -U ALLOW_N_CIGAR_READS\n")
    done
    for f in ${mappingtophat[@]}; do
		mkdir -p $outdir/errorcorrected/tophat
		o=$(basename $f)
	    o=$outdir/errorcorrected/tophat/${o%.*}.intervals
        cmd+=("${BASH_ALIASES[gatk]} -T RealignerTargetCreator -nt $threads -R $genome -I $f -o $o -U ALLOW_N_CIGAR_READS\n")
    done
    for f in ${mappingbwa[@]}; do
		mkdir -p $outdir/errorcorrected/bwa
		o=$(basename $f)
	    o=$outdir/errorcorrected/bwa/${o%.*}.intervals
        cmd+=("${BASH_ALIASES[gatk]} -T RealignerTargetCreator -nt $threads -R $genome -I $f -o $o -U ALLOW_N_CIGAR_READS\n")
    done
	#enable dev skip option if already done
	[[ $Sret -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}

	echo ":INFO: indel error correction"
	cmd=()
	for f in ${mappingsegemehl[@]}; do
		o=$(basename $f)
	    o=$outdir/errorcorrected/segemehl/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T IndelRealigner -R $genome -targetIntervals $o.intervals -I $f -o $o.torecal.bam -U ALLOW_N_CIGAR_READS\n")
    done
	for f in ${mappingtophat[@]}; do
		o=$(basename $f)
	    o=$outdir/errorcorrected/tophat/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T IndelRealigner -R $genome -targetIntervals $o.intervals -I $f -o $o.torecal.bam -U ALLOW_N_CIGAR_READS\n")
    done
	for f in ${mappingbwa[@]}; do
		o=$(basename $f)
	    o=$outdir/errorcorrected/bwa/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T IndelRealigner -R $genome -targetIntervals $o.intervals -I $f -o $o.torecal.bam -U ALLOW_N_CIGAR_READS\n")
    done
	#enable dev skip option if already done
	[[ $Srea -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	echo ":INFO: base recalibration"
	cmd=()
	for f in ${mappingsegemehl[@]}; do
		o=$(basename $f)
	    o=$outdir/errorcorrected/segemehl/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T BaseRecalibrator -nct $threads -R $genome -knownSites $genome.vcf -I $o.torecal.bam -o $o.recalreport -U ALLOW_N_CIGAR_READS\n")
    done
	for f in ${mappingtophat[@]}; do
		o=$(basename $f)
        o=$outdir/errorcorrected/tophat/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T BaseRecalibrator -nct $threads -R $genome -knownSites $genome.vcf -I $o.torecal.bam -o $o.recalreport -U ALLOW_N_CIGAR_READS\n")
    done
	for f in ${mappingbwa[@]}; do
		o=$(basename $f)
        o=$outdir/errorcorrected/bwa/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T BaseRecalibrator -nct $threads -R $genome -knownSites $genome.vcf -I $o.torecal.bam -o $o.recalreport -U ALLOW_N_CIGAR_READS\n")
    done
	#enable dev skip option if already done
	[[ $Srec -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}

	cmd=()
    for i in $(seq 0 $((${#mappingsegemehl[@]}-1))); do
		o=$(basename ${mappingsegemehl[$i]})
        o=$outdir/errorcorrected/segemehl/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T PrintReads -nct $threads -R $genome -I $o.torecal.bam -BQSR $o.recalreport -o $o.bam -U ALLOW_N_CIGAR_READS\n")
        mappingsegemehl[$i]=$o.bam
    done
    for i in $(seq 0 $((${#mappingtophat[@]}-1))); do
		o=$(basename ${mappingtophat[$i]})
        o=$outdir/errorcorrected/tophat/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T PrintReads -nct $threads -R $genome -I $o.torecal.bam -BQSR $o.recalreport -o $o.bam -U ALLOW_N_CIGAR_READS\n")
        mappingtophat[$i]=$o.bam
    done
    for i in $(seq 0 $((${#mappingbwa[@]}-1))); do
		o=$(basename ${mappingbwa[$i]})
        o=$outdir/errorcorrected/bwa/${o%.*}
        cmd+=("${BASH_ALIASES[gatk]} -T PrintReads -nct $threads -R $genome -I $o.torecal.bam -BQSR $o.recalreport -o $o.bam -U ALLOW_N_CIGAR_READS\n")
        mappingbwa[$i]=$o.bam
    done
	#enable dev skip option if already done
	[[ $Sprint -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}
fi

if [[ $nosmap -eq 0 ]]; then
	mkdir -p $outdir/vcf/segemehl
fi
if [[ $notmap -eq 0 ]]; then
	mkdir -p $outdir/vcf/tophat	
fi
if [[ $nobmap -eq 0 ]]; then
	mkdir -p $outdir/vcf/bwa
fi
if [[ $nohc -eq 0 ]]; then
    echo ":INFO: variance calling - haplotypecaller"
	cmd=()
	for f in ${mappingsegemehl[@]}; do
		o=$(basename $f)
	    o=$outdir/vcf/segemehl/${o%.*}.haplotypecaller.vcf
		cmd+=("${BASH_ALIASES[gatk]} -T HaplotypeCaller -dt NONE -baq OFF --min_base_quality_score 0 --max_alternate_alleles 3 --useNewAFCalculator -nct $threads -R $genome -I $f --dbsnp $genome.vcf -U ALLOW_N_CIGAR_READS | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o\n")
	done
	for f in ${mappingtophat[@]}; do
		o=$(basename $f)
	    o=$outdir/vcf/tophat/${o%.*}.haplotypecaller.vcf
		cmd+=("${BASH_ALIASES[gatk]} -T HaplotypeCaller -dt NONE -baq OFF --min_base_quality_score 0 --max_alternate_alleles 3 --useNewAFCalculator -nct $threads -R $genome -I $f --dbsnp $genome.vcf -U ALLOW_N_CIGAR_READS | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o\n")
	done
	for f in ${mappingbwa[@]}; do
		o=$(basename $f)
	    o=$outdir/vcf/bwa/${o%.*}.haplotypecaller.vcf
	    cmd+=("${BASH_ALIASES[gatk]} -T HaplotypeCaller -dt NONE -baq OFF --min_base_quality_score 0 --max_alternate_alleles 3 --useNewAFCalculator -nct $threads -R $genome -I $f --dbsnp $genome.vcf -U ALLOW_N_CIGAR_READS | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o\n")
	done
	#enable dev skip option if already done
	[[ $Shc -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}
fi

if [[ $nomu -eq 0 ]]; then
	echo ":INFO: variance calling - mutect2"	
	cmd=()
	for f in ${mappingsegemehl[@]}; do
		o=$(basename $f)
	    o=$outdir/vcf/segemehl/${o%.*}.mutect2.vcf
		cmd+=("${BASH_ALIASES[gatk]} -T MuTect2 -dt NONE -baq OFF --min_base_quality_score 0 --max_alternate_alleles 3 --useNewAFCalculator -nct $threads -R $genome -I:tumor $f --artifact_detection_mode --dbsnp $genome.vcf -U ALLOW_N_CIGAR_READS | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o\n")
	done
	for f in ${mappingtophat[@]}; do
		o=$(basename $f)
	    o=$outdir/vcf/tophat/${o%.*}.mutect2.vcf
		cmd+=("${BASH_ALIASES[gatk]} -T MuTect2 -dt NONE -baq OFF --min_base_quality_score 0 --max_alternate_alleles 3 --useNewAFCalculator -nct $threads -R $genome -I:tumor $f --artifact_detection_mode --dbsnp $genome.vcf -U ALLOW_N_CIGAR_READS | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o\n")
	done
	for f in ${mappingbwa[@]}; do
		o=$(basename $f)
	    o=$outdir/vcf/bwa/${o%.*}.mutect2.vcf
		cmd+=("${BASH_ALIASES[gatk]} -T MuTect2 -dt NONE -baq OFF --min_base_quality_score 0 --max_alternate_alleles 3 --useNewAFCalculator -nct $threads -R $genome -I:tumor $f --artifact_detection_mode --dbsnp $genome.vcf -U ALLOW_N_CIGAR_READS | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o\n")
	done
	#enable dev skip option if already done
	[[ $Smu -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}
fi

if [[ $nofb -eq 0 ]]; then 
	echo ":INFO: variance calling - freebayes"
	cmd=()
	for f in ${mappingsegemehl[@]}; do
		o=$(basename $f)
		o=$outdir/tmp/segemehl/${o%.*}.freebayes.vcf
		i=0
		for chr in $(${BASH_ALIASES[samtools]} view -H $f | grep '^@SQ' | perl -lane '$F[1]=~/SN:(.+)$/; $chr=$1; $F[2]=~/(\d+)$/; $l=$1; $chunk=sprintf("%d",$l/$ENV{threads}); $i=1; while(($i+1)*$chunk<$l){print($chr.":".($i*$chunk-$chunk+1)."-".($i*$chunk)); $i++} print($chr.":".(($i-1)*$chunk+1)."-".$l)'); do
			i=$((i+1))
	        cmd+=("${BASH_ALIASES[freebayes]} -f $genome -r $chr --genotype-qualities --use-best-n-alleles 3 --min-coverage 10 --min-alternate-fraction 0.1 --use-mapping-quality --harmonic-indel-quality -P 0.0001 $f | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o.$i\n")
		done
    done
    for f in ${mappingtophat[@]}; do
		o=$(basename $f)
		o=$outdir/tmp/tophat/${o%.*}.freebayes.vcf
		i=0
		for chr in $(${BASH_ALIASES[samtools]} view -H $f | grep '^@SQ' | perl -lane '$F[1]=~/SN:(.+)$/; $chr=$1; $F[2]=~/(\d+)$/; $l=$1; $chunk=sprintf("%d",$l/$ENV{threads}); $i=1; while(($i+1)*$chunk<$l){print($chr.":".($i*$chunk-$chunk+1)."-".($i*$chunk)); $i++} print($chr.":".(($i-1)*$chunk+1)."-".$l)'); do
			i=$((i+1))
	        cmd+=("${BASH_ALIASES[freebayes]} -f $genome -r $chr --genotype-qualities --use-best-n-alleles 3 --min-coverage 10 --min-alternate-fraction 0.1 --use-mapping-quality --harmonic-indel-quality -P 0.0001 $f | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o.$i\n")
		done
    done
    for f in ${mappingbwa[@]}; do
		o=$(basename $f)
		o=$outdir/tmp/bwa/${o%.*}.freebayes.vcf
		i=0
		for chr in $(${BASH_ALIASES[samtools]} view -H $f | grep '^@SQ' | perl -lane '$F[1]=~/SN:(.+)$/; $chr=$1; $F[2]=~/(\d+)$/; $l=$1; $chunk=sprintf("%d",$l/$ENV{threads}); $i=1; while(($i+1)*$chunk<$l){print($chr.":".($i*$chunk-$chunk+1)."-".($i*$chunk)); $i++} print($chr.":".(($i-1)*$chunk+1)."-".$l)'); do
			i=$((i+1))
			cmd+=("${BASH_ALIASES[freebayes]} -f $genome -r $chr --genotype-qualities --use-best-n-alleles 3 --min-coverage 10 --min-alternate-fraction 0.1 --use-mapping-quality --harmonic-indel-quality -P 0.0001 $f | ${BASH_ALIASES[bcftools]} view -Ou - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o.$i\n")
		done
    done
	#enable dev skip option if already done
	[[ $Sfb -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	if [[ $Sfb -eq 0 ]]; then
		for f in ${mappingsegemehl[@]}; do
			o=$(basename $f)
			tmp=$outdir/tmp/segemehl/${o%.*}.freebayes.vcf
			o=$outdir/vcf/segemehl/${o%.*}.freebayes.vcf
			${BASH_ALIASES[bcftools]} view -h $tmp.1 > $o
			cat $(ls -v $tmp.*) | awk '!/^#/{print}' >> $o
		done
		for f in ${mappingtophat[@]}; do
			o=$(basename $f)
			tmp=$outdir/tmp/tophat/${o%.*}.freebayes.vcf
			o=$outdir/vcf/tophat/${o%.*}.freebayes.vcf
			${BASH_ALIASES[bcftools]} view -h $tmp.1 > $o
			cat $(ls -v $tmp.*) | awk '!/^#/{print}' >> $o
		done
		for f in ${mappingbwa[@]}; do
			o=$(basename $f)
			tmp=$outdir/tmp/bwa/${o%.*}.freebayes.vcf
			o=$outdir/vcf/bwa/${o%.*}.freebayes.vcf
			${BASH_ALIASES[bcftools]} view -h $tmp.1 > $o
			cat $(ls -v $tmp.*) | awk '!/^#/{print}' >> $o
		done
	fi
fi

if [[ $nost -eq 0 ]]; then
	echo ":INFO: variance calling - samtools"
	cmd=()
	for f in ${mappingsegemehl[@]}; do
	    o=$(basename $f)
		o=$outdir/tmp/segemehl/${o%.*}.samtools.vcf
		i=0
		for chr in $(${BASH_ALIASES[samtools]} view -H $f | grep '^@SQ' | perl -lane '$F[1]=~/SN:(.+)$/; $chr=$1; $F[2]=~/(\d+)$/; $l=$1; $chunk=sprintf("%d",$l/$ENV{threads}); $i=1; while(($i+1)*$chunk<$l){print($chr.":".($i*$chunk-$chunk+1)."-".($i*$chunk)); $i++} print($chr.":".(($i-1)*$chunk+1)."-".$l)'); do
			i=$((i+1))
			cmd+=("${BASH_ALIASES[samtools]} mpileup -u -v -t 'DP,AD,ADF,ADR,SP,INFO/AD,INFO/ADF,INFO/ADR' -m 10 -C 0 -B -Q 0 -d 100000 -L 100000 -f $genome -r $chr $f | ${BASH_ALIASES[bcftools]} call -Ou -m -f GQ,GP -v - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o.$i\n")
		done
	done
	for f in ${mappingtophat[@]}; do
	    o=$(basename $f)
		o=$outdir/tmp/tophat/${o%.*}.samtools.vcf
		i=0
		for chr in $(${BASH_ALIASES[samtools]} view -H $f | grep '^@SQ' | perl -lane '$F[1]=~/SN:(.+)$/; $chr=$1; $F[2]=~/(\d+)$/; $l=$1; $chunk=sprintf("%d",$l/$ENV{threads}); $i=1; while(($i+1)*$chunk<$l){print($chr.":".($i*$chunk-$chunk+1)."-".($i*$chunk)); $i++} print($chr.":".(($i-1)*$chunk+1)."-".$l)'); do
			i=$((i+1))
			cmd+=("${BASH_ALIASES[samtools]} mpileup -u -v -t 'DP,AD,ADF,ADR,SP,INFO/AD,INFO/ADF,INFO/ADR' -m 10 -C 0 -B -Q 0 -d 100000 -L 100000 -f $genome -r $chr $f | ${BASH_ALIASES[bcftools]} call -Ou -m -f GQ,GP -v - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o.$i\n")
		done
	done
	for f in ${mappingbwa[@]}; do
	    o=$(basename $f)
		o=$outdir/tmp/bwa/${o%.*}.samtools.vcf
		i=0
		for chr in $(${BASH_ALIASES[samtools]} view -H $f | grep '^@SQ' | perl -lane '$F[1]=~/SN:(.+)$/; $chr=$1; $F[2]=~/(\d+)$/; $l=$1; $chunk=sprintf("%d",$l/$ENV{threads}); $i=1; while(($i+1)*$chunk<$l){print($chr.":".($i*$chunk-$chunk+1)."-".($i*$chunk)); $i++} print($chr.":".(($i-1)*$chunk+1)."-".$l)'); do
			i=$((i+1))
			cmd+=("${BASH_ALIASES[samtools]} mpileup -u -v -t 'DP,AD,ADF,ADR,SP,INFO/AD,INFO/ADF,INFO/ADR' -m 10 -C 0 -B -Q 0 -d 100000 -L 100000 -f $genome -r $chr $f | ${BASH_ALIASES[bcftools]} call -Ou -m -f GQ,GP -v - | ${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both | ${BASH_ALIASES[vcfix]} > $o.$i\n")
		done
	done
	#enable dev skip option if already done
	[[ $Sst -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	if [[ $Sst -eq 0 ]]; then
		for f in ${mappingsegemehl[@]}; do
			o=$(basename $f)
			tmp=$outdir/tmp/segemehl/${o%.*}.samtools.vcf
			o=$outdir/vcf/segemehl/${o%.*}.samtools.vcf
			${BASH_ALIASES[bcftools]} view -h $tmp.1 > $o
			cat $(ls -v $tmp.*) | awk '!/^#/{print}' >> $o
		done
		for f in ${mappingtophat[@]}; do
			o=$(basename $f)
			tmp=$outdir/tmp/tophat/${o%.*}.samtools.vcf
			o=$outdir/vcf/tophat/${o%.*}.samtools.vcf
			${BASH_ALIASES[bcftools]} view -h $tmp.1 > $o
			cat $(ls -v $tmp.*) | awk '!/^#/{print}' >> $o
		done
		for f in ${mappingbwa[@]}; do
			o=$(basename $f)
			tmp=$outdir/tmp/bwa/${o%.*}.samtools.vcf
			o=$outdir/vcf/bwa/${o%.*}.samtools.vcf
			${BASH_ALIASES[bcftools]} view -h $tmp.1 > $o
			cat $(ls -v $tmp.*) | awk '!/^#/{print}' >> $o
		done
	fi
fi

if [[ $nopp -eq 0 ]]; then
	echo ":INFO: variance calling - platypus"
	if [[ ! -e $genome.vcf.gz ]]; then
		${BASH_ALIASES[bgzip]} -f -@ $threads < $genome.vcf > $genome.vcf.gz
	fi
	if [[ ! -e $genome.vcf.gz.tbi ]]; then
		${BASH_ALIASES[tabix]} -f $genome.vcf.gz
	fi
	cmd=()
	for f in ${mappingsegemehl[@]}; do
        o=$(basename $f)
        o=$outdir/tmp/segemehl/${o%.*}.platypus.vcf
		cmd+=("${BASH_ALIASES[platypus]} callVariants --logFileName=$o.log --output=$o --refFile=$genome --bamFiles=$f --qdThreshold=0 --minGoodQualBases=0 --minBaseQual=0 --minMapQual=0 --minReads=10 --nCPU=$threads --filterVarsByCoverage=1 --minVarFreq=0.1 --filterDuplicates=1 --rmsmqThreshold=0 --qdThreshold=0 --useEMLikelihoods=1 --hapScoreThreshold=0 --badReadsThreshold=0 --maxVariants 100000 --minPosterior=3\n")
	done
	for f in ${mappingtophat[@]}; do
        o=$(basename $f)
        o=$outdir/tmp/tophat/${o%.*}.platypus.vcf
		cmd+=("${BASH_ALIASES[platypus]} callVariants --logFileName=$o.log --output=$o --refFile=$genome --bamFiles=$f --qdThreshold=0 --minGoodQualBases=0 --minBaseQual=0 --minMapQual=0 --minReads=10 --nCPU=$threads --filterVarsByCoverage=1 --minVarFreq=0.1 --filterDuplicates=1 --rmsmqThreshold=0 --qdThreshold=0 --useEMLikelihoods=1 --hapScoreThreshold=0 --badReadsThreshold=0 --maxVariants 100000 --minPosterior=3\n")
	done
	for f in ${mappingbwa[@]}; do
        o=$(basename $f)
        o=$outdir/tmp/bwa/${o%.*}.platypus.vcf
		cmd+=("${BASH_ALIASES[platypus]} callVariants --logFileName=$o.log --output=$o --refFile=$genome --bamFiles=$f --qdThreshold=0 --minGoodQualBases=0 --minBaseQual=0 --minMapQual=0 --minReads=10 --nCPU=$threads --filterVarsByCoverage=1 --minVarFreq=0.1 --filterDuplicates=1 --rmsmqThreshold=0 --qdThreshold=0 --useEMLikelihoods=1 --hapScoreThreshold=0 --badReadsThreshold=0 --maxVariants 100000 --minPosterior=3\n")
	done
	#enable dev skip option if already done
	[[ $Spp -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P 1 -I {} bash -c {} || echo -e ${cmd[@]}

	if [[ $Spp -eq 0 ]]; then
		cmd=()
		for f in ${mappingsegemehl[@]}; do
    	    o=$(basename $f)
			tmp=$outdir/tmp/segemehl/${o%.*}.platypus.vcf
			o=$outdir/vcf/segemehl/${o%.*}.platypus.vcf
			${BASH_ALIASES[bgzip]} -f -@ $threads < $tmp > $tmp.gz
			${BASH_ALIASES[tabix]} -f $tmp.gz
			cmd+=("${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both $tmp.gz | ${BASH_ALIASES[vcfix]} > $o\n")
		done
		for f in ${mappingtophat[@]}; do
    	    o=$(basename $f)
			tmp=$outdir/tmp/tophat/${o%.*}.platypus.vcf
			o=$outdir/vcf/tophat/${o%.*}.platypus.vcf
			${BASH_ALIASES[bgzip]} -f -@ $threads < $tmp > $tmp.gz
			${BASH_ALIASES[tabix]} -f $tmp.gz
			cmd+=("${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both $tmp.gz | ${BASH_ALIASES[vcfix]} > $o\n")
		done
		for f in ${mappingbwa[@]}; do
    	    o=$(basename $f)
			tmp=$outdir/tmp/bwa/${o%.*}.platypus.vcf
			o=$outdir/vcf/bwa/${o%.*}.platypus.vcf
			${BASH_ALIASES[bgzip]} -f -@ $threads < $tmp > $tmp.gz
			${BASH_ALIASES[tabix]} -f $tmp.gz
			cmd+=("${BASH_ALIASES[bcftools]} norm -f $genome -c s -m-both $tmp.gz | ${BASH_ALIASES[vcfix]} > $o\n")
		done
		echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {}
	fi
fi

if [[ $Smerge -eq 0 ]]; then	
	echo ":INFO: merging vcf files"
	cmd=()
	for f in ${mappingsegemehl[@]}; do
        o=$(basename $f)
        o=$outdir/vcf/segemehl/${o%.*}
		for v in $(ls $# o*.vcf | grep -v merged); do
		  	${BASH_ALIASES[bgzip]} -f -@ $threads < $v > $v.gz
		  	${BASH_ALIASES[tabix]} -f $v.gz
		done
		if [[ $(ls $o*.vcf.gz | grep -v merged | wc -l) -gt 0 ]]; then
			${BASH_ALIASES[bcftools]} merge --print-header --force-samples $(ls $o*.vcf.gz | grep -v merged) > $o.merged.vcf
			sed -i '$ d' $o.merged.vcf
			cmd+=("${BASH_ALIASES[vcfmerge]} "$(ls $o*.vcf | grep -v merged)" "$(ls $o*.vcf | grep -v merged | perl -F'\.' -ane '{print $F[-2]." "}')" >> $o.merged.vcf")
		fi
	done
	for f in ${mappingtophat[@]}; do
        o=$(basename $f)
        o=$outdir/vcf/tophat/${o%.*}
		for v in $(ls $o*.vcf | grep -v merged); do
		 	${BASH_ALIASES[bgzip]} -f -@ $threads < $v > $v.gz
		 	${BASH_ALIASES[tabix]} -f $v.gz
		done
		if [[ $(ls $o*.vcf.gz | grep -v merged | wc -l) -gt 0 ]]; then
			${BASH_ALIASES[bcftools]} merge --print-header --force-samples $(ls $o*.vcf.gz | grep -v merged) > $o.merged.vcf
			sed -i '$ d' $o.merged.vcf
			cmd+=("${BASH_ALIASES[vcfmerge]} "$(ls $o*.vcf | grep -v merged)" "$(ls $o*.vcf | grep -v merged | perl -F'\.' -ane '{print $F[-2]." "}')" >> $o.merged.vcf")
		fi
	done
	for f in ${mappingbwa[@]}; do
        o=$(basename $f)
        o=$outdir/vcf/bwa/${o%.*}
		for v in $(ls $o*.vcf | grep -v merged); do
		 	${BASH_ALIASES[bgzip]} -f -@ $threads < $v > $v.gz
		 	${BASH_ALIASES[tabix]} -f $v.gz
		done
		if [[ $(ls $o*.vcf.gz | grep -v merged | wc -l) -gt 0 ]]; then
			${BASH_ALIASES[bcftools]} merge --print-header --force-samples $(ls $o*.vcf.gz | grep -v merged) > $o.merged.vcf
			sed -i '$ d' $o.merged.vcf
			cmd+=("${BASH_ALIASES[vcfmerge]} "$(ls $o*.vcf | grep -v merged)" "$(ls $o*.vcf | grep -v merged | perl -F'\.' -ane '{print $F[-2]." "}')" >> $o.merged.vcf")
		fi
	done
	#enable dev skip option if already done
	[[ $Smerge -eq 0 ]] && echo -e ${cmd[@]} | /usr/bin/time -v xargs -P $threads -I {} bash -c {} || echo -e ${cmd[@]}

	for f in ${mappingsegemehl[@]}; do
        o=$(basename $f)
        o=$outdir/vcf/segemehl/${o%.*}
        export caller=$(ls $o*.vcf | grep -v merged | head -1 | perl -F'\.' -ane '{print $F[-2]}')
        perl -lane '$F[6]=join(";",grep {$_=~s/^$ENV[caller]://; } split /;/,$F[6]); $F[6]="." unless $F[6]; print join "\t",@F' $o.merged.vcf > $o.merged.reduced.vcf
	  	${BASH_ALIASES[bgzip]} -f -@ $threads < $o.merged.vcf > $o.merged.vcf.gz
	done
	for f in ${mappingtophat[@]}; do
        o=$(basename $f)
        o=$outdir/vcf/tophat/${o%.*}
	 	export caller=$(ls $o*.vcf | grep -v merged | head -1 | perl -F'\.' -ane '{print $F[-2]}')
        perl -lane '$F[6]=join(";",grep {$_=~s/^$ENV[caller]://; } split /;/,$F[6]); $F[6]="." unless $F[6]; print join "\t",@F' $o.merged.vcf > $o.merged.reduced.vcf
	  	${BASH_ALIASES[bgzip]} -f -@ $threads < $o.merged.vcf > $o.merged.vcf.gz
	done
	for f in ${mappingbwa[@]}; do
        o=$(basename $f)
        o=$outdir/vcf/bwa/${o%.*}
	 	export caller=$(ls $o*.vcf | grep -v merged | head -1 | perl -F'\.' -ane '{print $F[-2]}')
        perl -lane '$F[6]=join(";",grep {$_=~s/^$ENV[caller]://; } split /;/,$F[6]); $F[6]="." unless $F[6]; print join "\t",@F' $o.merged.vcf > $o.merged.reduced.vcf
	  	${BASH_ALIASES[bgzip]} -f -@ $threads < $o.merged.vcf > $o.merged.vcf.gz
	done
fi

	echo ":INFO: fin"
}

### main
pwd=$PWD
muvacdir=$(dirname $0)
fq1=''
fq2=''
genome=''
threads=$( (sleep 1; echo 1) | script -e -q -c "stty rows 100; top -n 2" /dev/null | grep -E 'Cpu[0-9]+' | awk '$3+$5<40{print}' | wc -l)
outdir=$pwd/results
help=0
verbose=0
tooldir=$MUVAC
make=''
adapter=''
nobmap=0
notmap=0
nosmap=0
norecal=0
nohc=0
nomu=0
nost=0
nofb=0
nopp=0
noprep=0
notrim=0
log=$outdir/run.log
remove=0
### dev opts
Sq=0
Sa=0
Scor=0
Sconv=0
Str=0
Sms=0
Smt=0
Smb=0
Sort=0
Srg=0
Srmd=0
Sreo=0
Sret=0
Srea=0
Srec=0
Sprint=0
Shc=0
Smu=0
Sfb=0
Sst=0
Spp=0
Smerge=0
split=0

checkopt (){
	opt=$1
	shift
	arg=$@
	case $opt in
	-h | --h | -help | --help) help=1; return 0;;
	-v | --v | -verbose | --verbose) verbose=1; return 0;;
	-no-bmap | --no-bwa) nobmap=1; return 0;;
	-no-tmap | --no-tophat) notmap=1; return 0;;
	-no-smap | --no-segemehl) nosmap=1; return 0;;
	-no-recal | --no-recalibration) norecal=1; return 0;;
	-no-hc | --no-haplotypecaller) nohc=1; return 0;;
	-no-mu | --no-mutect) nomu=1; return 0;;
	-no-st | --no-samtools) nost=1; return 0;;
	-no-fb | --no-freebayes) nofb=1; return 0;;
	-no-pp | --no-platypus) nopp=1; return 0;;
	-no-pre | --no-preprocessing) noprep=1; return 0;;
	-no-trim | --no-trimming) notrim=1; return 0;;
	-r | --r | -remove | --remove) remove=1; return 0;;
	-s | --s | -split | --split) split=1; return 0;;
	-Sq) Sq=1; return 0;;
	-Sa) Sa=1; return 0;;
	-Scor) Scor=1; return 0;;
	-Sconv) Sconv=1; return 0;;
	-Str) Str=1; return 0;;
	-Sms) Sms=1; return 0;;
	-Smt) Smt=1; return 0;;
	-Smb) Smb=1; return 0;;
	-Sort) Sort=1; return 0;;
	-Srg) Srg=1; return 0;;
	-Srmd) Srmd=1; return 0;;
	-Sreo) Sreo=1; return 0;;
	-Sret) Sret=1; return 0;;
	-Srea) Srea=1; return 0;;
	-Srec) Srec=1; return 0;;
	-Sprint) Sprint=1; return 0;;
	-Shc) Shc=1; return 0;;
	-Smu) Smu=1; return 0;;
	-Sfb) Sfb=1; return 0;;
	-Sst) Sst=1; return 0;;
	-Spp) Spp=1; return 0;;
	-Smerge) Smerge=1; return 0;;
	esac
	if [[ ! $arg =~ ^- ]]; then
		case $opt in
		-1 | --1 | -fastq1 | --fastq1) fq1=$arg;;
		-2 | --2 | -fastq2 | --fastq2) fq2=$arg;;
		-t | --t | -threads | --threads) threads=$arg;;
		-o | --o | -out | --out) outdir=$arg;;
		-g | --g | -genome | --genome) genome=$arg;;
		-a | --a | -adapter | --adapter) adapter=$arg;;
		-i | --i | -install | --install) make=$arg;;
		-l | --l | -log | --log) log=$arg;;
		*$(basename $0) | -*) echo "illegal option $arg"; exit 1;; 
		*) echo "illegal option $arg"; exit 1;;
		esac
	else
		echo "illegal option $opt or assignment for $opt"
		exit 1
	fi
}
for i in $(seq 1 $#); do
	if [[ ${!i} =~ ^- ]]; then
		j=$((i+1))
		checkopt ${!i} ${!j}
	else 
		j=$((i-1))
		checkopt ${!j} ${!i}
	fi
done

if [[ $help -gt 0 ]]; then
	usage
fi
if [[ ! $tooldir ]]; then
	tooldir=$(cd $muvacdir && echo $PWD && cd $pwd)/tools
fi

if [[ $make ]]; then
	echo ":INFO: installation started. please be patient. check logs by: tail -f $tooldir/install.log"
	echo '' > $tooldir/install.log
	if [[ $verbose -gt 0 ]]; then 
		install 2>&1 | tee $tooldir/install.log
		excode=${PIPESTATUS[0]}
	else
		progress &
		userlog $tooldir/install.log &
		install &>> $tooldir/install.log
		excode=${PIPESTATUS[0]}
	fi
	if [[ $excode -gt 0 ]]; then
		tail -1 $tooldir/install.log
		exit 1
	else 
		exit 0
	fi
fi

# alias definitions for system calls
tool=$(ls $tooldir/vcfix.pl)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i all"; exit 1; fi
alias vcfix=$tool

tool=$(ls $tooldir/vcfmerge.pl)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i all"; exit 1; fi
alias vcfmerge=$tool

tool=$(ls $tooldir/Trimmomatic-*/trimmomatic-*.jar | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i trimmomatic"; exit 1; fi
alias trimmomatic="java -jar $tool"

tool=$(ls $tooldir/bcftools-*/bcftools | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i bcftools"; exit 1; fi
alias bcftools=$tool

tool=$(ls $tooldir/Rcorrector-*/run_rcorrector.pl | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i rcorrector"; exit 1; fi
alias rcorrector=$tool

tool=$(ls $tooldir/picard-*/picard.jar | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i picard"; exit 1; fi
alias picard="java -Xmx16g -Djava.io.tmpdir=$outdir/tmp -jar $tool"

tool=$(ls $tooldir/freebayes/bin/freebayes | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i freebayes"; exit 1; fi
alias freebayes=$tool

tool=$tooldir/Platypus-master/bin/Platypus.py
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i platypus"; exit 1; fi
alias platypus=$tool

tool=$(ls $tooldir/fastx_toolkit-*/built/bin/fastq_quality_converter | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i fastx_toolkit"; exit 1; fi
alias fastq_quality_converter=$tool

tool=$(ls $tooldir/tophat-*/tophat2 | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i tophat"; exit 1; fi
alias tophat2=$tool

tool=$(ls $tooldir/bwa-*/bwa | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i bwa"; exit 1; fi
alias bwa=$tool

tool=$(ls $tooldir/gatk-*/target/executable/GenomeAnalysisTK.jar | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i gatk"; exit 1; fi
alias gatk="java -Xmx16g -Djava.io.tmpdir=$outdir/tmp -jar $tool"

tool=$(ls $tooldir/bowtie2-*/bowtie2-build | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i tophat"; exit 1; fi
alias bowtie2-build=$tool

tool=$(ls $tooldir/segemehl_*/segemehl.x | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i segemehl"; exit 1; fi
alias segemehl=$tool

tool=$(ls $tooldir/samtools*/built/bin/samtools | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i samtools"; exit 1; fi
alias samtools=$tool

tool=$(ls $tooldir/samtools*/built/bin/tabix | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i samtools"; exit 1; fi
alias tabix=$tool

tool=$(ls $tooldir/samtools*/built/bin/bgzip | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i samtools"; exit 1; fi
alias bgzip=$tool

tool=$(ls $tooldir/FastQC-*/fastqc | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i fastqc"; exit 1; fi
alias fastqc=$tool

tool=$(ls $tooldir/DNApi-*/dnapi.py | sort -r | head -1)
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i dnapi"; exit 1; fi
alias dnapi=$tool

tool=$tooldir/cutadapt/bin/cutadapt
if [[ -z $tool ]]; then	echo ":ERROR: tool missing - try installation parameter: -i cutadapt"; exit 1; fi
alias cutadapt=$tool

if [[ ! $genome ]] || [[ ! $fq1 ]]; then 
	echo ":ERROR: mandatory parameter missing - call "$(basename $0)" -h for help"
	exit 1
fi

# check files
cd $pwd
if [[ ! -e $genome ]]; then
	echo ":ERROR: genome file does not exists $genome"
	exit 1
fi
if [[ ! -e $genome.vcf ]]; then
	echo ":ERROR: dbSNP file does not exists $genome.vcf"
	exit 1
fi

declare -A fastq1
declare -A fastq2
IFS=','
i=-1
for f in $fq1; do
	if [[ ! -e $f ]]; then
		echo ":ERROR: fastq file does not exists $f"
		exit 1
	fi
	fastq1[$((i+1))]=$f
done
i=-1
for f in $fq2; do
	if [[ ! -e $f ]]; then
		echo ":ERROR: fastq file does not exists $f"
		exit 1
	fi
	fastq2[$((i+1))]=$f
done
unset IFS
if [[ $fq2 ]] && [[ ${#fastq1[@]} != ${#fastq2[@]} ]]; then 
	echo ":ERROR: fastq file of read paires missing"
	exit 1
fi

mkdir -p $outdir/tmp/segemehl
mkdir -p $outdir/tmp/tophat
mkdir -p $outdir/tmp/bwa

if [[ ! $adapter ]]; then
	echo -e ":INFO: no adapter provided! do you need to clip an adapter? [y|n]"
	read yn
	if [[ $yn =~ [yY] ]]; then
		echo ":INFO: suggesting adapter"
		a=$(${BASH_ALIASES[dnapi]} -k 6:10:2 --show-all ${fastq1[0]})
		b=$(${BASH_ALIASES[dnapi]} -k 6:10:2 --show-all ${fastq2[0]})
		echo -e "$a\n$b"
		exit 0
	fi
fi

export PYTHONPATH=$tooldir/cutadapt/lib/python2.7/site-packages:$PYTHONPATH
export threads
samtools=$(ls -d $tooldir/samtools-* | sort -r | head -1)
export C_INCLUDE_PATH=$samtools/built/include
export LD_LIBRARY_PATH=$samtools/built/lib

echo ":INFO: pipeline started with $threads threads" | tee $log
echo ":INFO: command: "$(basename $0)" $@" | tee -a $log
echo ":INFO: check logs via tail -f $log"
if [[ $? -gt 0 ]]; then
	echo ":ERROR: directory for logfile does not exists $log"
	exit 1
fi
if [[ $verbose -gt 0 ]]; then 
	pipeline 2>&1 | tee -a $log
	excode=${PIPESTATUS[0]}
else
	progress &
	userlog $log &
	pipeline &>> $log
	excode=${PIPESTATUS[0]}
fi
if [[ $excode -gt 0 ]]; then
	tail -1 $log
	echo ":ERROR: pipeline failed" | tee -a $log
	exit 1
else 
	if [[ $remove -eq 1 ]]; then
		rm -rf $outdir/tmp
		ls $outdir/errorcorrected/*/* | grep -v -E 'reordered.(bam|bai)$' | xargs rm -f
		rm -rf $outdir/mapped/*/logs
		ls $outdir/mapped/*/* | grep -v -E '(bam|bai|unmapped.*)$' | xargs rm -f
		ls $outdir/noduplicates/*/* | grep -v -E 'reordered.(bam|bai)$' | xargs rm -f
		ls $outdir/rawcorrected/* | grep -E '(corrected|merged)$' | xargs rm -f
		rm -f log.txt
		rm -f *.bed
	fi
	exit 0
fi
